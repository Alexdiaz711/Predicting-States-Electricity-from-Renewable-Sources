# This script takes the data from a .csv provided by the Energy Information Administration (EIA)
# and performs preprocessing required to for modeling, then builds the SQL database used for
# data storage.



import pandas as pd
import numpy as np
import datetime as dt
import psycopg2 as pg2



def create_source_df(df, source):
    """
    Function to take the main downloaded dataset and create dataframe for a specific
    energy source and fills null values for states with no history of energy from that source.

    PARAMETERS
    ----------
    df: pandas DataFrame
        DataFrame containing the entire dataset created from EIA's .csv
    source: string
        String refering to a specific energy source. Must be included in 
        df['ENERGY SOURCE'].unique()
    
    RETURNS
    --------
    new_df: pandas DataFrame
        New dataframe for total monthly electricity gegnerated from a specific energy source
        for each state.
    """
    new_df = df[df['ENERGY SOURCE']==source]
    new_df = new_df.pivot(index='STATE', columns='DATE', values='GENERATION (Megawatthours)')
    for ST in df.STATE.unique():
        if ST not in new_df.index:
            new_df.loc[ST] = 0.0
    new_df.fillna(0.0, inplace=True)
    new_df.drop('DC', inplace=True)
    return new_df

def create_annual(df):
    """
    Function to take the main downloaded dataset and create dataframe for a specific
    energy source and fills null values for states with no history of energy from that source.

    PARAMETERS
    ----------
    df: pandas DataFrame
        Dataframe containing total monthly electricity gegnerated from a specific energy source
        for each state.
    
    RETURNS
    --------
    new_df: pandas DataFrame
        New dataframe for total annual electricity gegnerated from a specific energy source
        for each state.
    """
    new_df = pd.DataFrame(columns=range(2001, 2020), index=df.index, data=0)
    for i in range(2001, 2020):
        for col in df.columns:
            if col.year == i:
                new_df[i] += df[col]
    return new_df

def dict_to_df(dictionary):
    """
    Function to a dictionary of dataframes containing monthly or annual data from each specific
    energy source and create a master Dataframe to be used for SQL database creation.

    PARAMETERS
    ----------
    dictionary: dict
        Dictionary containing dataframes with total monthly or annual electricity gegnerated 
        from each specific energy source for each state.
    
    RETURNS
    --------
    df: pandas DataFrame
        New dataframe for total monthly or annual electricity gegnerated from each specific energy 
        source for each state.
    """
    for i, source in enumerate(dictionary.keys()):
        dictionary[source]['SOURCE'] = source
        if i == 0:
            df = dictionary[source].reset_index()
        else:
            df = df.append(dictionary[source].reset_index())
    return df.reset_index(drop=True)



if __name__ == "__main__":
    print('Script may take up to 30 minutes...')

    # Load from .xlsx into dataframe for total electricity generated by month
    print('Loading data from .csv ...')
    data1 = pd.read_excel('data/generation_monthly.xlsx', sheet_name=list(range(5)))
    data2 = pd.read_excel('data/generation_monthly.xlsx', sheet_name=list(range(5, 14)), skiprows=4)
    df = data1[0]
    for i in range(1,14):
        if i < 5:
            df = df.append(data1[i])
        elif i < 8:
            df = df.append(data2[i])
        else:
            df = df.append(data2[i].rename(
                {'GENERATION\n(Megawatthours)': 'GENERATION (Megawatthours)'}, 
                axis=1)
                )
    df = df[df['TYPE OF PRODUCER'] == 'Total Electric Power Industry']

    # Clean name for US total
    df.STATE = df.STATE.apply(lambda x: 'US' if x in ['US-TOTAL', 'US-Total'] else x)

    # Create Datetime object for Date column
    df['DATE'] = df.YEAR*10000 + df.MONTH*100 + 1
    df.DATE = df.DATE.apply(lambda x: dt.datetime.strptime(str(x), '%Y%m%d'))

    # Drop uneeded columns
    df.drop(['YEAR', 'MONTH', 'TYPE OF PRODUCER'], axis=1, inplace=True)

    # creating dataframes for monthly electricity by source
    print('Creating energy source dataframes ...')
    solar_df = create_source_df(df, 'Solar Thermal and Photovoltaic')
    wind_df = create_source_df(df, 'Wind')
    total_df = create_source_df(df, 'Total')
    hydro1_df = create_source_df(df, 'Hydroelectric Conventional')
    hydro2_df = create_source_df(df, 'Pumped Storage')
    hydro_df = hydro1_df.sort_values('STATE') + hydro2_df.sort_values('STATE')
    bio1_df = create_source_df(df, 'Wood and Wood Derived Fuels')
    bio2_df = create_source_df(df, 'Other Biomass')
    bio_df = bio1_df.sort_values('STATE') + bio2_df.sort_values('STATE')
    geo_df = create_source_df(df, 'Geothermal')
    coal_df = create_source_df(df, 'Coal')
    petro_df = create_source_df(df, 'Petroleum')
    nat_gas_df = create_source_df(df, 'Natural Gas')
    other_gas_df = create_source_df(df, 'Other Gases')
    nuclear_df = create_source_df(df, 'Nuclear')
    other_df = create_source_df(df, 'Other')

    # Create dict of dataframes for monthly generation from each source as a percent of the total
    print('Creating monthly df dictionaries ...')
    monthly_pct = {}
    monthly_pct['solar'] = solar_df / total_df
    monthly_pct['wind'] = wind_df / total_df
    monthly_pct['hydro'] = hydro_df / total_df
    monthly_pct['bio'] = bio_df / total_df
    monthly_pct['geo'] = geo_df / total_df
    monthly_pct['coal'] = coal_df / total_df
    monthly_pct['petro'] = petro_df / total_df
    monthly_pct['nat_gas'] = nat_gas_df / total_df
    monthly_pct['other_gas'] = other_gas_df / total_df
    monthly_pct['nuclear'] = nuclear_df / total_df
    monthly_pct['other'] = other_df / total_df
    monthly_pct['renewables'] = (monthly_pct['solar'] + monthly_pct['wind'] + 
                                monthly_pct['hydro'] + monthly_pct['bio'] + 
                                monthly_pct['geo']
                                )
    monthly_pct['non_renewables'] = (monthly_pct['coal'] + monthly_pct['petro'] + 
                                    monthly_pct['nat_gas'] + monthly_pct['other_gas'] + 
                                    monthly_pct['nuclear'] + monthly_pct['other']
                                    )
    
    # create dict of dataframes for annual generation from each source as a percent of the total
    print('Creating annual df dictionaries ...')
    total_annual = create_annual(total_df)
    annual_pct = {}
    annual_pct['solar'] = create_annual(solar_df) / total_annual
    annual_pct['wind'] = create_annual(wind_df) / total_annual
    annual_pct['hydro'] = create_annual(hydro_df) / total_annual
    annual_pct['bio'] = create_annual(bio_df) / total_annual
    annual_pct['geo'] = create_annual(geo_df) / total_annual
    annual_pct['coal'] = create_annual(coal_df) / total_annual
    annual_pct['petro'] = create_annual(petro_df) / total_annual
    annual_pct['nat_gas'] = create_annual(nat_gas_df) / total_annual
    annual_pct['other_gas'] = create_annual(other_gas_df) / total_annual
    annual_pct['nuclear'] = create_annual(nuclear_df) / total_annual
    annual_pct['other'] = create_annual(other_df) / total_annual
    annual_pct['renewables'] = (annual_pct['solar'] + annual_pct['wind'] + 
                                annual_pct['hydro'] + annual_pct['bio'] + 
                                annual_pct['geo']
                                )
    annual_pct['non_renewables'] = (annual_pct['coal'] + annual_pct['petro'] + 
                                    annual_pct['nat_gas'] + annual_pct['other_gas'] + 
                                    annual_pct['nuclear'] + annual_pct['other']
                                    )

    # Create final annual and monthly dataframes to be stored in SQL Database
    annual_df = dict_to_df(annual_pct)
    monthly_df = dict_to_df(monthly_pct)

    # Connecting to PostgreSQL server
    conn = pg2.connect(dbname='postgres', 
                        user='postgres', 
                        host='localhost', 
                        port='5432', 
                        password='password')
    cur = conn.cursor()

    # Create Monthly Table
    query = """
    CREATE TABLE monthly (
        state CHAR(2)
    ,   source VARCHAR(20)
    ,   month DATE
    ,   data DEC(7,6)
        );
    """
    cur.execute(query)
    conn.commit()

    # Populate monthly table
    print('Creating monthly SQL table ...')
    for ind in monthly_df.index:
        series = monthly_df.loc[ind] 
        state = series.STATE
        source = series.SOURCE
        for i, d in enumerate(series[1:229]):
            month = str(series[1:229].index[i])[:10]
            data = d
            query = """
            INSERT INTO monthly (state, source, month, data) 
            VALUES ('{}', '{}', '{}', {});
            """.format(state, source, month, data)
            cur.execute(query)
            conn.commit()

    # Create Annual Table
    query = """
    CREATE TABLE annual (
        state CHAR(2)
    ,   source VARCHAR(20)
    ,   year INTEGER
    ,   data DEC(7,6)
        );
    """
    cur.execute(query)
    conn.commit()

    # Populate annual table
    print('Creating annual SQL table ...')
    for ind in annual_df.index:
        series = annual_df.loc[ind] 
        state = series.STATE
        source = series.SOURCE
        for year in series.index[1:-1]:
            data = series[year]
            query = """
            INSERT INTO annual (state, source, year, data) 
            VALUES ('{}', '{}', {}, {});
            """.format(state, source, year, data)
            cur.execute(query)
            conn.commit()
    
    # Closing cursor and connection to PostgreSQL server
    print('Finished!')
    cur.close()
    conn.close()

